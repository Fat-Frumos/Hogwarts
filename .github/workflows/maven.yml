name: Java CI with Maven

on:
  push:
    branches: [ "master", "dev" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: write
  pages: write
  id-token: write
  actions: read
  checks: write

jobs:
  Test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    services:
      postgres:
        image: postgres

        env:
          POSTGRES_PASSWORD: mypass
          POSTGRES_USER: myuser
          POSTGRES_DB: example

        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - run: |
          sudo apt-get update && sudo apt-get install --yes --no-install-recommends postgresql-client
      - run: |
          ls -lah ${{ github.workspace }}
      - run: |
          psql -h localhost -U myuser -d example -c '

          CREATE TABLE "user"
          (
          id         SERIAL PRIMARY KEY,
          first_name VARCHAR(255) NOT NULL,
          last_name  VARCHAR(255) NOT NULL,
          username   VARCHAR(255) NOT NULL UNIQUE,
          password   VARCHAR(255) NOT NULL,
          is_active  BOOLEAN      NOT NULL
          );
          
          CREATE TABLE "trainee"
          (
          id            SERIAL PRIMARY KEY,
          date_of_birth DATE,
          address       VARCHAR(255),
          user_id       BIGINT NOT NULL,
          FOREIGN KEY (user_id) REFERENCES "user" (id) ON DELETE CASCADE
          );
          
          
          CREATE TABLE "training_type"
          (
          id                 SERIAL PRIMARY KEY,
          training_type_name VARCHAR(50) NOT NULL
          );
          
          CREATE TABLE "trainer"
          (
          id                SERIAL PRIMARY KEY,
          specialization_id BIGINT NOT NULL,
          user_id           BIGINT NOT NULL,
          FOREIGN KEY (specialization_id) REFERENCES training_type (id),
          FOREIGN KEY (user_id) REFERENCES "user" (id) ON DELETE CASCADE
          );
          
          CREATE TABLE "training"
          (
          id                SERIAL PRIMARY KEY,
          trainee_id        BIGINT       NOT NULL,
          trainer_id        BIGINT       NOT NULL,
          training_name     VARCHAR(255) NOT NULL,
          training_type_id  BIGINT       NOT NULL,
          training_date     DATE         NOT NULL,
          training_duration INTEGER      NOT NULL,
          FOREIGN KEY (trainee_id) REFERENCES "trainee" (id) ON DELETE CASCADE,
          FOREIGN KEY (trainer_id) REFERENCES "trainer" (id) ON DELETE CASCADE,
          FOREIGN KEY (training_type_id) REFERENCES "training_type" (id)
          );
          
          CREATE TABLE "trainee_trainer"
          (
          trainee_id BIGINT NOT NULL,
          trainer_id BIGINT NOT NULL,
          PRIMARY KEY (trainee_id, trainer_id),
          FOREIGN KEY (trainee_id) REFERENCES "trainee" (id) ON DELETE CASCADE,
          FOREIGN KEY (trainer_id) REFERENCES "trainer" (id) ON DELETE CASCADE
          );        
          '

        env:
          PGPASSWORD: mypass
      - run: |
          psql -h localhost -U myuser -d example -c '\dt'
        env:
          PGPASSWORD: mypass


      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn -B package -DskipTests --file pom.xml

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/gym:latest

      - name: Log out from Docker Hub
        run: docker logout

  ##
  #      - name: Generate JaCoCo Report
  #        run: mvn jacoco:report
  #        if: success() || failure()

  #      - name: Publish Test Report
  #        uses: mikepenz/action-junit-report@v4
  #        with:
  #          report_paths: '**/target/surefire-reports/TEST-*.xml'
  #        if: success() || failure()
  #
  #      - name: Upload JaCoCo Report
  #        uses: actions/upload-artifact@v4
  #        with:
  #          name: jacoco-report
  #          path: '**/target/site/jacoco/'
  #        if: success() || failure()

  check-java-code-style:
    name: Check Java code style

    runs-on: ubuntu-latest

    steps:
      - name: Clone code from repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run java checkstyle
        uses: nikitasavinov/checkstyle-action@master
        with:
          checkstyle_config: 'check.xml'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: 'github-pr-check'
          tool_name: 'Checkstyle'
